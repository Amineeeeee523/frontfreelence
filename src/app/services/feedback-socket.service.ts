// src/app/services/feedback-socket.service.ts
import { Injectable, OnDestroy, inject } from '@angular/core';
import { Client, IMessage, StompSubscription } from '@stomp/stompjs';
import SockJS from 'sockjs-client';
import { Observable, Subject, BehaviorSubject, firstValueFrom } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { WS_BASE_URL } from '../core/tokens/ws-base-url.token';
import { PublishedPayload, SubmittedPayload, UpdatedPayload, DeletedPayload } from '../models/feedback.models';

type ConnectionState = 'CONNECTED' | 'DISCONNECTED' | 'CONNECTING';

@Injectable({ providedIn: 'root' })
export class FeedbackSocketService implements OnDestroy {
  private readonly wsBaseUrl = inject(WS_BASE_URL);
  private client: Client | null = null;
  private connection$ = new BehaviorSubject<ConnectionState>('DISCONNECTED');
  private subscriptions: StompSubscription[] = [];
  private connectionPromise: Promise<void> | null = null;

  constructor() {
    // Log de configuration au d√©marrage
    console.group('[FeedbackSocketService] Configuration');
    console.log('üîß WS_BASE_URL:', this.wsBaseUrl);
    console.log('üîß Topics disponibles:');
    console.log('  - /topic/mission.{id}/feedback.submitted');
    console.log('  - /topic/mission.{id}/feedback.published');
    console.log('  - /topic/mission.{id}/feedback.updated');
    console.log('  - /topic/mission.{id}/feedback.deleted');
    console.log('üîß √âtat initial:', this.connection$.value);
    console.groupEnd();
  }

  /** Connect to the STOMP broker over SockJS. */
  connect(): Observable<ConnectionState> {
    console.group('[FeedbackSocketService] Connect');
    console.log('üîß √âtat actuel:', this.connection$.value);
    console.log('üîß Client existant:', !!this.client);
    console.log('üîß Client connect√©:', this.client?.connected);
    
    if (this.client && this.client.connected) {
      console.log('‚úÖ D√©j√† connect√©, retour de l\'√©tat actuel');
      this.connection$.next('CONNECTED');
      console.groupEnd();
      return this.connection$.asObservable();
    }

    if (this.connectionPromise) {
      console.log('‚è≥ Connexion en cours, retour de la promesse existante');
      console.groupEnd();
      return this.connection$.asObservable();
    }

    console.log('üîÑ D√©marrage nouvelle connexion');
    this.connection$.next('CONNECTING');
    
    this.connectionPromise = new Promise<void>((resolve, reject) => {
      const client = new Client({
        webSocketFactory: () => {
          console.log('üåê Cr√©ation WebSocket vers:', this.wsBaseUrl);
          return new SockJS(this.wsBaseUrl);
        },
        reconnectDelay: 3000,
        heartbeatIncoming: 15000,
        heartbeatOutgoing: 15000,
        onConnect: () => {
          console.log('‚úÖ Connexion STOMP √©tablie');
          this.connection$.next('CONNECTED');
          resolve();
        },
        onStompError: (error) => {
          console.error('‚ùå Erreur STOMP:', error);
          this.connection$.next('DISCONNECTED');
          this.connectionPromise = null;
          reject(error);
        },
        onDisconnect: () => {
          console.log('üîå D√©connexion STOMP');
          this.connection$.next('DISCONNECTED');
          this.connectionPromise = null;
        }
      });

      this.client = client;
      console.log('üöÄ Activation du client STOMP');
      client.activate();
    });

    console.groupEnd();
    return this.connection$.asObservable();
  }

  /** Disconnect from the broker and clean subscriptions. */
  disconnect(): void {
    console.group('[FeedbackSocketService] Disconnect');
    console.log('üîß √âtat actuel:', this.connection$.value);
    console.log('üîß Subscriptions actives:', this.subscriptions.length);
    
    this.subscriptions.forEach(s => s.unsubscribe());
    this.subscriptions = [];
    
    if (this.client) {
      const c = this.client;
      this.client = null;
      if (c.active) {
        console.log('üîå D√©connexion du client STOMP');
        c.deactivate();
      }
    }
    
    this.connectionPromise = null;
    this.connection$.next('DISCONNECTED');
    console.log('‚úÖ D√©connexion termin√©e');
    console.groupEnd();
  }

  /** Subscribe to feedback.submitted events for a mission. */
  subscribeToSubmitted(missionId: number): Observable<SubmittedPayload> {
    const topic = `/topic/mission.${missionId}/feedback.submitted`;
    return this.createTopicStream<SubmittedPayload>(topic);
  }

  /** Subscribe to feedback.published events for a mission. */
  subscribeToPublished(missionId: number): Observable<PublishedPayload> {
    const topic = `/topic/mission.${missionId}/feedback.published`;
    return this.createTopicStream<PublishedPayload>(topic);
  }

  /** Subscribe to feedback.updated events for a mission. */
  subscribeToUpdated(missionId: number): Observable<UpdatedPayload> {
    const topic = `/topic/mission.${missionId}/feedback.updated`;
    return this.createTopicStream<UpdatedPayload>(topic);
  }

  /** Subscribe to feedback.deleted events for a mission. */
  subscribeToDeleted(missionId: number): Observable<DeletedPayload> {
    const topic = `/topic/mission.${missionId}/feedback.deleted`;
    return this.createTopicStream<DeletedPayload>(topic);
  }

  /** Ensure connection is established before subscribing. */
  private async ensureConnected(): Promise<void> {
    console.group('[FeedbackSocketService] Ensure Connected');
    console.log('üîß √âtat actuel:', this.connection$.value);
    
    if (this.connection$.value === 'CONNECTED') {
      console.log('‚úÖ D√©j√† connect√©');
      console.groupEnd();
      return;
    }

    if (this.connection$.value === 'CONNECTING') {
      console.log('‚è≥ Connexion en cours, attente...');
      await firstValueFrom(this.connection$.pipe(
        filter(state => state === 'CONNECTED'),
        take(1)
      ));
      console.log('‚úÖ Connexion √©tablie apr√®s attente');
      console.groupEnd();
      return;
    }

    console.log('üîÑ D√©marrage connexion...');
    this.connect();
    await firstValueFrom(this.connection$.pipe(
      filter(state => state === 'CONNECTED'),
      take(1)
    ));
    console.log('‚úÖ Connexion √©tablie');
    console.groupEnd();
  }

  private createTopicStream<T>(destination: string): Observable<T> {
    return new Observable<T>(observer => {
      console.group(`[FeedbackSocketService] Create Topic Stream: ${destination}`);
      console.log('üîß √âtat actuel:', this.connection$.value);
      
      // Ensure connection before subscribing
      this.ensureConnected().then(() => {
        if (!this.client || !this.client.connected) {
          console.error('‚ùå Client non disponible apr√®s connexion');
          observer.error(new Error('Client not available after connection'));
          console.groupEnd();
          return;
        }

        console.log('‚úÖ Souscription au topic:', destination);
        const sub = this.client.subscribe(destination, (msg: IMessage) => {
          try {
            const payload = JSON.parse(msg.body) as T;
            console.log('üì® Message re√ßu:', payload);
            observer.next(payload);
          } catch (e) {
            console.error('‚ùå Erreur parsing message:', e);
            // ignore malformed messages
          }
        });
        
        this.subscriptions.push(sub);
        console.log('‚úÖ Subscription ajout√©e, total:', this.subscriptions.length);
        console.groupEnd();
      }).catch(error => {
        console.error('‚ùå Erreur lors de la connexion:', error);
        observer.error(error);
        console.groupEnd();
      });

      return () => {
        console.log('üîå Nettoyage subscription:', destination);
        // Find and remove the subscription
        const subIndex = this.subscriptions.length - 1; // Last added subscription
        if (subIndex >= 0) {
          const sub = this.subscriptions[subIndex];
          sub.unsubscribe();
          this.subscriptions.splice(subIndex, 1);
          console.log('‚úÖ Subscription supprim√©e, restantes:', this.subscriptions.length);
        }
      };
    });
  }

  /** Get current connection state. */
  getConnectionState(): ConnectionState {
    return this.connection$.value;
  }

  /** Check if connected. */
  isConnected(): boolean {
    return this.connection$.value === 'CONNECTED' && this.client?.connected === true;
  }

  /** Get connection state as observable. */
  getConnectionState$(): Observable<ConnectionState> {
    return this.connection$.asObservable();
  }

  ngOnDestroy(): void {
    this.disconnect();
  }
}


